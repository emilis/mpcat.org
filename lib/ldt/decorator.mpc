--- description ----------------------------------------------------------------

Forked from:
    https://github.com/kueblc/LDT/blob/master/lib/TextareaDecorator.js

--- requirements ---------------------------------------------------------------

zepto/event
zepto/zepto

--- exports --------------------------------------------------------------------

createElement
wrapElement

--- jst ------------------------------------------------------------------------

<textarea class="<%- CLASSNAME %>"><%- value %></textarea>

--- js -------------------------------------------------------------------------

var createEl =          document.createElement.bind( document );


function createElement( parser, value ){

    var el =            createEl( "textarea" );
    el.value =          value;
    el.className =      CLASSNAME;

    return wrapElement( parser, el );
}///


function wrapElement( parser, textarea ){

    var parent =        createEl( "div" );
    var output =        createEl( "pre" );
    var label =         createEl( "label" );

    parent.className =  CLASSNAME + " " + textarea.className; // + " ldt "; // + textarea.className;
    parent.appendChild( output );
    parent.appendChild( label );

    if ( textarea.parentNode ){
        textarea.parentNode.replaceChild( parent, textarea );
    }
    textarea.className =    "";
    textarea.spellcheck =   false;

    label.appendChild( textarea );

    var update =        createOnInput( textarea, output, parser );
    /// console.log( "wrapElement", textarea, update, $ );
    $( textarea ).on( "input", update );
    update();

    return {
        element:        parent,
        input:          textarea,
        output:         output,
        update:         update
    };
}///

/// private functions ----------------------------------------------------------

function createOnInput( textarea, output, parser ){
    return function update(){

        if ( textarea.value.trim() ){

            updateSpans( parser, output, textarea.value );
            $( textarea ).height( $( output ).height() + 40 );

        } else {

            output.innerHTML =  "";
        }
    };//
}///


function updateSpans( parser, output, code ){

    var oldTokens =     output.childNodes;
    var newTokens =     parser.tokenize( code );
    var firstDiff;
    var lastDiffNew;
    var lastDiffOld;

    for ( firstDiff = 0; firstDiff < newTokens.length && firstDiff < oldTokens.length; firstDiff++ ){
        if ( newTokens[firstDiff] !== oldTokens[firstDiff].textContent ){
            break;
        }
    }

    while( newTokens.length < oldTokens.length ){
        
        output.removeChild( oldTokens[firstDiff] );
    }

    // find the last difference
    for( lastDiffNew = newTokens.length-1, lastDiffOld = oldTokens.length -1; firstDiff < lastDiffOld; lastDiffNew--, lastDiffOld-- ){
        if( newTokens[lastDiffNew] !== oldTokens[lastDiffOld].textContent ){
            break;
        }
    }

    // update modified spans
    for( ; firstDiff <= lastDiffOld; firstDiff++ ){

        oldTokens[firstDiff].className =    parser.identify( newTokens[firstDiff] );
        oldTokens[firstDiff].textContent =  oldTokens[firstDiff].innerText = newTokens[firstDiff];
    }

    // add in modified spans
    for( var insertionPt = oldTokens[firstDiff] || null; firstDiff <= lastDiffNew; firstDiff++ ){

        var span =  createEl( "span" );
        span.className =    parser.identify( newTokens[firstDiff] );
        span.textContent =  span.innerText =    newTokens[firstDiff];
        output.insertBefore( span, insertionPt );
    }
}///


--- styl -----------------------------------------------------------------------

$ldtAlpha =         0.4

{SELECTOR}

    $monospace =        monospace
    $ldtAlpha =         0.4

    fontSizing =

        padding         0
        margin          0

        font-family     $monospace
        font-size       16px
        color           black

    {fontSizing}

    > pre

        {fontSizing}

    > label > textarea

        {fontSizing}

        /// fallback for browsers without rgba */
        color           transparent
        /// make sure the alpha is low enough so it doesn't block the output layer */
        color           rgba( 0, 0, 0, $ldtAlpha )

/// settings you shouldn't play with unless you have a good reason -------------

{SELECTOR}

	overflow:               auto
	position:               relative

    > pre

        -moz-padding-start  1px

    > label

        position            absolute
        top                 0
        left                0
        width               100%
        height              100%
        display             inline
        box-sizing          border-box
        -moz-box-sizing     border-box
        -webkit-box-sizing  border-box
        cursor              text

        > textarea

            margin          0
            padding         0
            border          0
            background      0
            outline         none
            resize          none
            min-width       100%
            min-height      100%
            overflow        hidden
            /// IE doesn't support rgba texarea, so use vendor specific alpha filter */
            /// filter          alpha( opacity = 10 )

